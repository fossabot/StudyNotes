<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="app02.StudentMapper">
    <resultMap id="studentMap" type="app02.Student">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="sal" column="sal"/>
    </resultMap>

    <!-- 学生添加功能 -->
    <insert id="add" parameterType="app02.Student">
        insert into student(id,name,sal) values (#{id},#{name},#{sal})
    </insert>

    <!--
        根据id查询学生
        select标签：用于映射SQL的select语句
            id属性：命名空间的唯一标示符
            parameterType属性：表示传入SQL的参数类型
            resultType属性：表示SQL语句返回类型的完整类名或别名
            注：如果参数不是一个实体的话，只是一个普通变量，例如：int,double,String类型，这里的#{中间的变量名可以随便写}，不过提倡用方法的形参
    -->
    <select id="findById" parameterType="int" resultType="app02.Student">
        select id,name,sal from student where id=#{id}
    </select>

    <!--
        查询所有学生
        注：理论上resultType要写List<Student>但这里只写List中的泛型类型即可，即只要书写Student的全路径名
    -->
    <select id="findAll" resultType="app02.Student">
        select id,name,sal from student
    </select>

    <!--
        学生更新
        update标签：用于映射SQL的update语句
            id属性：命名空间的唯一标示符
            parameterType属性：表示传入SQL中的参数类型
    -->
    <update id="update" parameterType="app02.Student">
        update student set name=#{name},sal=#{sal} where id=#{id}
    </update>

    <!--
        学生删除
        delete标签：用于映射SQL的delete语句
            id属性：命名空间的唯一标示符
            parameterType：表示传入SQL中的参数类型
    -->
    <delete id="delete" parameterType="app02.Student">
        delete from student where id=#{id}
    </delete>
</mapper>